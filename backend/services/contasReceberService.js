/* ------------------------------------------------------------------
 * Servi√ßo: contasReceberService.js  ‚Ä¢  v1.0 - Padr√£o Brux√£o
 * Respons√°vel por gerenciar regras de neg√≥cio de CONTAS A RECEBER.
 * Inclui cancelamento de t√≠tulos e logs de auditoria.
 * ------------------------------------------------------------------ */

const { sequelize } = require('../config/db');
const { DataTypes, Op } = require('sequelize');
const ContasAReceber = require('../models/ContasAReceber');
const Status = require('../models/Status');

/**
 * Cancela todos os t√≠tulos associados a um movimento
 * - Marca deletedAt e statusId = CANCELADO
 * - Adiciona motivo e loga a√ß√£o
 */
async function cancelarTitulosPorMovimento(movimentoId, motivo = 'Cancelamento de movimento') {
  const transaction = await sequelize.transaction();
  try {
    console.log(`‚öôÔ∏è  Cancelando t√≠tulos do movimento ${movimentoId}...`);

    // Busca t√≠tulos ativos vinculados ao movimento
    const titulos = await ContasAReceber.findAll({
      where: {
        movimentoId,
        deletedAt: { [Op.is]: null },
      },
      transaction,
    });

    if (!titulos || titulos.length === 0) {
      console.log('‚ÑπÔ∏è  Nenhum t√≠tulo ativo encontrado para esse movimento.');
      await transaction.commit();
      return { sucesso: true, mensagem: 'Nenhum t√≠tulo para cancelar.' };
    }

    // Atualiza cada t√≠tulo
    for (const titulo of titulos) {
      titulo.statusId = 7; // CANCELADO
      titulo.deletedAt = new Date();
      titulo.observacao = `${titulo.observacao || ''} | Cancelado em ${new Date().toLocaleString()} - Motivo: ${motivo}`;
      await titulo.save({ transaction });
      console.log(`üßæ T√≠tulo ${titulo.id} cancelado.`);
    }

    await transaction.commit();
    console.log(`‚úÖ ${titulos.length} t√≠tulo(s) cancelado(s) com sucesso.`);
    return { sucesso: true, titulosCancelados: titulos.length };
  } catch (error) {
    await transaction.rollback();
    console.error('‚ùå Erro em cancelarTitulosPorMovimento:', error);
    throw error;
  }
}

/**
 * Cancela t√≠tulo individual (uso manual ou auditoria)
 */
async function cancelarTituloIndividual(tituloId, motivo = 'Cancelamento manual') {
  const transaction = await sequelize.transaction();
  try {
    const titulo = await ContasAReceber.findByPk(tituloId, { transaction });
    if (!titulo) throw new Error(`T√≠tulo ${tituloId} n√£o encontrado.`);

    titulo.statusId = 7; // CANCELADO
    titulo.deletedAt = new Date();
    titulo.observacao = `${titulo.observacao || ''} | Cancelado em ${new Date().toLocaleString()} - Motivo: ${motivo}`;
    await titulo.save({ transaction });

    await transaction.commit();
    console.log(`üßæ T√≠tulo ${tituloId} cancelado com sucesso.`);
    return { sucesso: true };
  } catch (error) {
    await transaction.rollback();
    console.error('‚ùå Erro em cancelarTituloIndividual:', error);
    throw error;
  }
}

/**
 * (Uso futuro) Gera novo t√≠tulo ‚Äî renegocia√ß√£o, parcelamento, etc.
 */
async function gerarNovoTitulo(dadosTitulo) {
  const transaction = await sequelize.transaction();
  try {
    const novoTitulo = await ContasAReceber.create(dadosTitulo, { transaction });
    await transaction.commit();
    console.log(`üí∞ Novo t√≠tulo gerado (ID ${novoTitulo.id}).`);
    return { sucesso: true, tituloId: novoTitulo.id };
  } catch (error) {
    await transaction.rollback();
    console.error('‚ùå Erro em gerarNovoTitulo:', error);
    throw error;
  }
}

module.exports = {
  cancelarTitulosPorMovimento,
  cancelarTituloIndividual,
  gerarNovoTitulo,
};
